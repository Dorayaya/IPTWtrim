dataExample <- dataGenFun()
head(dataExample)
dataExample <- dataGenFun()
head(dataExample)
dataExample <- dataGenFun()
head(dataExample)
dataExample <- dataGenFun()
head(dataExample)
dataExample <- dataGenFun()
head(dataExample)
dataExample <- dataGenFun()
head(dataExample)
dataExample <- dataGenFun()
head(dataExample)
dataExample <- dataGenFun()
head(dataExample)
dataExample <- dataGenFun()
head(dataExample)
PATH = "/Users/yaya/Desktop/IPTWtrim"
fs::dir_tree(path=PATH, type="any")
install.packages("MASS")
install.packages("ggplot2")
install.packages("gridExtra")
library(MASS)
library(ggplot2)
library(gridExtra)
library(devtools)
install_github("Dorayaya/IPTWtrim",
build_vignettes = TRUE)
library(IPTWtrim)
dataExample <- dataGenFun()
head(dataExample)
install.packages("MASS")
install.packages("ggplot2")
dataExample <- dataGenFun()
install.packages("MASS")
install.packages("ggplot2")
install.packages("gridExtra")
library(MASS)
library(ggplot2)
library(gridExtra)
install.packages("remotes")  # Install the remotes package if not already installed
remotes::install_github("cran/MASS")
remotes::install_github("tidyverse/ggplot2")
measureATE.example <- measureATEfun()
measureATE.example <- measureATEfun()
measureATE.example <- measureATEfun()
measureATE.example <- measureATEfun()
trimSummary.example <- measureATEfun()
trimSummary.example <- trimSummary()
library(IPTWtrim)
trimSummary.example <- trimSummary()
library(devtools)
install_github("Dorayaya/IPTWtrim",
build_vignettes = TRUE)
library(IPTWtrim)
trimSummary.example <- trimSummary()
dataExample <- dataGenFun()
head(dataExample)
library(devtools)
install_github("Dorayaya/IPTWtrim",
build_vignettes = TRUE)
library(IPTWtrim)
trimSummary.example <- trimSummary()
library(devtools)
install_github("Dorayaya/IPTWtrim",
build_vignettes = TRUE)
library(IPTWtrim)
devtools::check(pkg="IPTWtrim")
devtools::check(pkg="/Users/yaya/Desktop/IPTWtrim")
devtools::check(pkg="/Users/yaya/Desktop/IPTWtrim")
devtools::check(pkg="/Users/yaya/Documents/GitHub/IPTWtrim")
devtools::check(pkg="/Users/yaya/Documents/GitHub/IPTWtrim")
devtools::check(pkg="/Users/yaya/Documents/GitHub/IPTWtrim")
library(testthat)
context("Testing trimSummary function")
trimSummary <- function(nsim = 1000, n = 500, mu = c(10, 1, 11),
sig.mat = matrix(c(11^2, 4, 4,
4, 3^2, 3,
4, 3, 8^2), 3),
eta = c(-1.5, 0.1, 0.3, 0.2),
theta =  c(110, -12, -0.3, -0.8, -0.2),
trimperc.try = c(1, 0.99, 0.95, 0.9, 0.75, 0.5))
# Test 1: Test that trimSummary returns an error with negative nsim
test_that("trimSummary throws error with negative nsim", {
expect_error(trimSummary(nsim = 1000, n = 500, mu = c(10, 1, 11),
sig.mat = matrix(c(11^2, 4, 4,
4, 3^2, 3,
4, 3, 8^2), 3),
eta = c(-1.5, 0.1, 0.3, 0.2),
theta =  c(110, -12, -0.3, -0.8, -0.2),
trimperc.try = c(1, 0.99, 0.95, 0.9, 0.75, 0.5)))}
trimSummary <- function(nsim = 1000, n = 500, mu = c(10, 1, 11),
trimSummary <- function(nsim = 1000, n = 500, mu = c(10, 1, 11),
sig.mat = matrix(c(11^2, 4, 4,
4, 3^2, 3,
4, 3, 8^2), 3),
eta = c(-1.5, 0.1, 0.3, 0.2),
theta =  c(110, -12, -0.3, -0.8, -0.2),
trimperc.try = c(1, 0.99, 0.95, 0.9, 0.75, 0.5)) {
bias <- c()
mse <- c()
weight.mean <- c()
weight.ese <- c()
weight.asd <- c()
weight.max <- c()
weight.min <- c()
for (i in 1:length(trimperc.try)) {
measure.psi1 <- measureATEfun(nsim, trimperc.try[i], n, mu, sig.mat, eta, theta)
bias[i] <- measure.psi1[1]
mse[i] <- measure.psi1[2]
weight.mean[i] <- measure.psi1[3]
weight.ese[i] <- measure.psi1[4]
weight.asd[i] <- measure.psi1[5]
weight.max[i] <- measure.psi1[6]
weight.min[i] <- measure.psi1[7]
}
ese <- sqrt(mse - bias^2)
trim.proportion <- (1 - trimperc.try) * 2
data <- data.frame(trim.perc = trimperc.try, trim.prop = trim.proportion, weight.mean = weight.mean,
weight.ese = weight.ese, weight.asd = weight.asd,
weight.max = weight.max, weight.min = weight.min,
bias = bias, ese = ese, mse = mse)
# Create three plots using ggplot2
plot_bias <- ggplot2::ggplot(data, ggplot2::aes(x = trim.prop, y = bias)) +
ggplot2::geom_line() +
ggplot2::labs(x = "Weight Trimming Proportion", y = "Bias")
plot_ese <- ggplot2::ggplot(data, ggplot2::aes(x = trim.prop, y = ese)) +
ggplot2::geom_line() +
ggplot2::labs(x = "Weight Trimming Proportion", y = "EmpSE")
plot_mse <- ggplot2::ggplot(data, ggplot2::aes(x = trim.prop, y = mse)) +
ggplot2::geom_line() +
ggplot2::labs(x = "Weight Trimming Proportion", y = "MSE")
# Arrange the three plots side by side using grid.arrange from gridExtra
combined_plots <- gridExtra::grid.arrange(plot_bias, plot_ese, plot_mse, ncol = 3)
return(data)
}
# Test 1: Test that trimSummary returns an error with negative nsim
test_that("trimSummary throws error with negative nsim", {
expect_error(trimSummary(nsim = 1000, n = 500, mu = c(10, 1, 11),
sig.mat = matrix(c(11^2, 4, 4,
4, 3^2, 3,
4, 3, 8^2), 3),
eta = c(-1.5, 0.1, 0.3, 0.2),
theta =  c(110, -12, -0.3, -0.8, -0.2),
trimperc.try = c(1, 0.99, 0.95, 0.9, 0.75, 0.5)))}
# Test 1: Test that trimSummary returns an error with negative nsim
test_that("trimSummary throws error with negative nsim", {
library(testthat)
test_that("trimSummary throws error with negative nsim", {
expect_error(trimSummary(nsim = -7, n = 500, mu = c(10, 1, 11),
sig.mat = matrix(c(11^2, 4, 4,
4, 3^2, 3,
4, 3, 8^2), 3),
eta = c(-1.5, 0.1, 0.3, 0.2),
theta =  c(110, -12, -0.3, -0.8, -0.2),
trimperc.try = c(1, 0.99, 0.95, 0.9, 0.75, 0.5)))})
trimSummary <- function(nsim = 1000, n = 500, mu = c(10, 1, 11),
sig.mat = matrix(c(11^2, 4, 4,
4, 3^2, 3,
4, 3, 8^2), 3),
eta = c(-1.5, 0.1, 0.3, 0.2),
theta =  c(110, -12, -0.3, -0.8, -0.2),
trimperc.try = c(1, 0.99, 0.95, 0.9, 0.75, 0.5),
seed = 20739377) {
set.seed(seed)
bias <- c()
mse <- c()
weight.mean <- c()
weight.ese <- c()
weight.asd <- c()
weight.max <- c()
weight.min <- c()
for (i in 1:length(trimperc.try)) {
measure.psi1 <- measureATEfun(nsim, trimperc.try[i], n, mu, sig.mat, eta, theta)
bias[i] <- measure.psi1[1]
mse[i] <- measure.psi1[2]
weight.mean[i] <- measure.psi1[3]
weight.ese[i] <- measure.psi1[4]
weight.asd[i] <- measure.psi1[5]
weight.max[i] <- measure.psi1[6]
weight.min[i] <- measure.psi1[7]
}
ese <- sqrt(mse - bias^2)
trim.proportion <- (1 - trimperc.try) * 2
data <- data.frame(trim.perc = trimperc.try, trim.prop = trim.proportion, weight.mean = weight.mean,
weight.ese = weight.ese, weight.asd = weight.asd,
weight.max = weight.max, weight.min = weight.min,
bias = bias, ese = ese, mse = mse)
# Create three plots using ggplot2
plot_bias <- ggplot2::ggplot(data, ggplot2::aes(x = trim.prop, y = bias)) +
ggplot2::geom_line() +
ggplot2::labs(x = "Weight Trimming Proportion", y = "Bias")
plot_ese <- ggplot2::ggplot(data, ggplot2::aes(x = trim.prop, y = ese)) +
ggplot2::geom_line() +
ggplot2::labs(x = "Weight Trimming Proportion", y = "EmpSE")
plot_mse <- ggplot2::ggplot(data, ggplot2::aes(x = trim.prop, y = mse)) +
ggplot2::geom_line() +
ggplot2::labs(x = "Weight Trimming Proportion", y = "MSE")
# Arrange the three plots side by side using grid.arrange from gridExtra
combined_plots <- gridExtra::grid.arrange(plot_bias, plot_ese, plot_mse, ncol = 3)
return(data)
}
