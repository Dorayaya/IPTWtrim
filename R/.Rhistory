weight.mean[i] <- measure.psi1[3]
weight.ese[i] <- measure.psi1[4]
weight.asd[i] <- measure.psi1[5]
weight.max[i] <- measure.psi1[6]
weight.min[i] <- measure.psi1[7]
}
ese <- sqrt(mse - bias^2)
bias
measure.psi1 <- measureATEfun(nsim, trimperc.try[i], n, mu, sig.mat, eta, theta)
bias[i] <- measure.psi1[1]
measure.psi1
measure.psi1[1]
bias[i]
weight.mean[i]
weight.ese[i]
weight.asd[i]
#' Measure Average Treatment Effect (ATE) Using Trimming
#'
#' `measureATEfun()` estimates the Average Treatment Effect (ATE) using trimming in the
#' weighting step to reduce the influence of extreme weights, and it gives summary statistics
#' for weights in each iteration. The function generates `nsim` datasets and
#' estimates the ATE for each dataset using a Generalized Linear Model (GLM)
#' with binary treatment (A) and continuous confounders (x1, x2, x3). Trimming is applied
#' to the weights calculated based on the estimated propensity scores to reduce the impact
#' of extreme weights.
#'
#' @param nsim The number of simulations to perform. An integer.
#' @param trim.p The percentile of extreme weights to be trimmed on both ends.
#' A numeric value between 0.5 and 1. For example, 0.9 represents trimming the top 10%
#' and bottom 10% of the weights.
#' @param n The number of observations in each simulated dataset. An integer.
#' @param mu The mean vector of the multivariate normal distribution for confounders x1, x2, x3.
#' A numeric vector of length 3.
#' @param sig.mat The covariance matrix of the multivariate normal distribution for confounders
#' x1, x2, x3. A 3x3 numeric matrix.
#' @param eta The coefficients of the logistic regression model for the binary treatment A.
#' A numeric vector of length 4, representing intercept and coefficients for x1, x2, x3.
#' @param theta The coefficients of the linear regression model for the continuous outcome Y.
#' A numeric vector of length 5, representing intercept, coefficients for A, x1, x2, x3.
#'
#' @return A data frame containing measures related to ATE estimation using trimming. The
#' columns include bias (difference between estimated and true ATE), mean squared error (MSE)
#' of the estimator, mean of trimmed weights, empirical standard error of mean of trimmed weights,
#' average standard deviation of trimmed weights, average maximum trimmed weight, and average minimum
#' trimmed weight.
#'
#' @importFrom MASS mvrnorm
#' @export
measureATEfun <- function(nsim = 1000, trim.p = 0.9, n = 500,
mu = c(10, 1, 11), sig.mat = matrix(c(11^2, 4, 4,
4, 3^2, 3,
4, 3, 8^2), 3),
eta = c(-1.5,0.1, 0.3, 0.2), theta =  c(110, -12, -0.3, -0.8, -0.2)){
psi1.trim <- c()
mean.w.trim <- c()
min.trim <- c()
max.trim <- c()
sd.w.trim <- c()
for (r in 1:nsim){
data <- dataGenFun(n, mu, sig.mat, eta, theta)  # Assuming dataGenFun is a function that generates data
x1 <- data$x1
x2 <- data$x2
x3 <- data$x3
A <- data$A
Y <- data$Y
expo.model <- glm(A ~ x1 + x2 + x3, data = data, family = binomial(link = "logit"))
eta.hat <- expo.model$coefficients
pi.hat <- (1 + exp(-(eta.hat[1] + x1 * eta.hat[2] + x2 * eta.hat[3] + x3 * eta.hat[4])))^(-1)
w.un <- data$A / pi.hat + (1 - data$A) / (1 - pi.hat)
upper_bound <- quantile(w.un, trim.p)
lower_bound <- quantile(w.un, 1 - trim.p)
w.trim <- pmax(pmin(w.un, upper_bound), lower_bound)
mean.w.trim[r] <- mean(w.trim)
sd.w.trim[r] <- sd(w.trim)
max.trim[r] <- max(w.trim)
min.trim[r] <- min(w.trim)
### trimmed weighting
msm.trim <- lm(Y ~ A, data = data, weights = w.trim)
psi1.trim[r] <- msm.trim$coefficients[2]
}
bias <- mean(psi1.trim) - (-12)  # Assuming the true ATE is -12
ese <- sd(psi1.trim)
mse <- mean((psi1.trim + 12)^2)
weight.mean <- mean(mean.w.trim)
weight.ese <- sd(mean.w.trim)
weight.asd <- mean(sd.w.trim)
weight.max <- mean(max.trim)
weight.min <- mean(min.trim)
measure <- cbind(bias, mse, weight.mean, weight.ese, weight.asd, weight.max, weight.min)
return(measure)
}
#' Measure Average Treatment Effect (ATE) Using Trimming
#'
#' `measureATEfun()` estimates the Average Treatment Effect (ATE) using trimming in the
#' weighting step to reduce the influence of extreme weights, and it gives summary statistics
#' for weights in each iteration. The function generates `nsim` datasets and
#' estimates the ATE for each dataset using a Generalized Linear Model (GLM)
#' with binary treatment (A) and continuous confounders (x1, x2, x3). Trimming is applied
#' to the weights calculated based on the estimated propensity scores to reduce the impact
#' of extreme weights.
#'
#' @param nsim The number of simulations to perform. An integer.
#' @param trim.p The percentile of extreme weights to be trimmed on both ends.
#' A numeric value between 0.5 and 1. For example, 0.9 represents trimming the top 10%
#' and bottom 10% of the weights.
#' @param n The number of observations in each simulated dataset. An integer.
#' @param mu The mean vector of the multivariate normal distribution for confounders x1, x2, x3.
#' A numeric vector of length 3.
#' @param sig.mat The covariance matrix of the multivariate normal distribution for confounders
#' x1, x2, x3. A 3x3 numeric matrix.
#' @param eta The coefficients of the logistic regression model for the binary treatment A.
#' A numeric vector of length 4, representing intercept and coefficients for x1, x2, x3.
#' @param theta The coefficients of the linear regression model for the continuous outcome Y.
#' A numeric vector of length 5, representing intercept, coefficients for A, x1, x2, x3.
#'
#' @return A matrix containing measures related to ATE estimation using trimming. The
#' columns include bias (difference between estimated and true ATE), mean squared error (MSE)
#' of the estimator, mean of trimmed weights, empirical standard error of mean of trimmed weights,
#' average standard deviation of trimmed weights, average maximum trimmed weight, and average minimum
#' trimmed weight.
#'
#' @importFrom MASS mvrnorm
#' @export
measureATEfun <- function(nsim = 1000, trim.p = 0.9, n = 500,
mu = c(10, 1, 11), sig.mat = matrix(c(11^2, 4, 4,
4, 3^2, 3,
4, 3, 8^2), 3),
eta = c(-1.5,0.1, 0.3, 0.2), theta =  c(110, -12, -0.3, -0.8, -0.2)){
psi1.trim <- c()
mean.w.trim <- c()
min.trim <- c()
max.trim <- c()
sd.w.trim <- c()
for (r in 1:nsim){
data <- dataGenFun(n, mu, sig.mat, eta, theta)  # Assuming dataGenFun is a function that generates data
x1 <- data$x1
x2 <- data$x2
x3 <- data$x3
A <- data$A
Y <- data$Y
expo.model <- glm(A ~ x1 + x2 + x3, data = data, family = binomial(link = "logit"))
eta.hat <- expo.model$coefficients
pi.hat <- (1 + exp(-(eta.hat[1] + x1 * eta.hat[2] + x2 * eta.hat[3] + x3 * eta.hat[4])))^(-1)
w.un <- data$A / pi.hat + (1 - data$A) / (1 - pi.hat)
upper_bound <- quantile(w.un, trim.p)
lower_bound <- quantile(w.un, 1 - trim.p)
w.trim <- pmax(pmin(w.un, upper_bound), lower_bound)
mean.w.trim[r] <- mean(w.trim)
sd.w.trim[r] <- sd(w.trim)
max.trim[r] <- max(w.trim)
min.trim[r] <- min(w.trim)
### trimmed weighting
msm.trim <- lm(Y ~ A, data = data, weights = w.trim)
psi1.trim[r] <- msm.trim$coefficients[2]
}
bias <- mean(psi1.trim) - (-12)  # Assuming the true ATE is -12
ese <- sd(psi1.trim)
mse <- mean((psi1.trim + 12)^2)
weight.mean <- mean(mean.w.trim)
weight.ese <- sd(mean.w.trim)
weight.asd <- mean(sd.w.trim)
weight.max <- mean(max.trim)
weight.min <- mean(min.trim)
measure <- cbind(bias, mse, weight.mean, weight.ese, weight.asd, weight.max, weight.min)
return(measure)
}
measureATEfun()
measureATEfun <- function(nsim = 1000, trim.p = 0.9, n = 500,
mu = c(10, 1, 11), sig.mat = matrix(c(11^2, 4, 4,
4, 3^2, 3,
4, 3, 8^2), 3),
eta = c(-1.5,0.1, 0.3, 0.2), theta =  c(110, -12, -0.3, -0.8, -0.2)){
psi1.trim <- c()
mean.w.trim <- c()
min.trim <- c()
max.trim <- c()
sd.w.trim <- c()
for (r in 1:nsim){
data <- dataGenFun(n, mu, sig.mat, eta, theta)  # Assuming dataGenFun is a function that generates data
x1 <- data$x1
x2 <- data$x2
x3 <- data$x3
A <- data$A
Y <- data$Y
expo.model <- glm(A ~ x1 + x2 + x3, data = data, family = binomial(link = "logit"))
eta.hat <- expo.model$coefficients
pi.hat <- (1 + exp(-(eta.hat[1] + x1 * eta.hat[2] + x2 * eta.hat[3] + x3 * eta.hat[4])))^(-1)
w.un <- data$A / pi.hat + (1 - data$A) / (1 - pi.hat)
upper_bound <- quantile(w.un, trim.p)
lower_bound <- quantile(w.un, 1 - trim.p)
w.trim <- pmax(pmin(w.un, upper_bound), lower_bound)
mean.w.trim[r] <- mean(w.trim)
sd.w.trim[r] <- sd(w.trim)
max.trim[r] <- max(w.trim)
min.trim[r] <- min(w.trim)
### trimmed weighting
msm.trim <- lm(Y ~ A, data = data, weights = w.trim)
psi1.trim[r] <- msm.trim$coefficients[2]
}
bias <- mean(psi1.trim) - theta[2]  # Assuming the true ATE is -12
ese <- sd(psi1.trim)
mse <- mean((psi1.trim + 12)^2)
weight.mean <- mean(mean.w.trim)
weight.ese <- sd(mean.w.trim)
weight.asd <- mean(sd.w.trim)
weight.max <- mean(max.trim)
weight.min <- mean(min.trim)
measure <- cbind(bias, mse, weight.mean, weight.ese, weight.asd, weight.max, weight.min)
return(measure)
}
measureATEfun()
measureATEfun <- function(nsim = 1000, trim.p = 0.95, n = 500,
mu = c(10, 1, 11), sig.mat = matrix(c(11^2, 4, 4,
4, 3^2, 3,
4, 3, 8^2), 3),
eta = c(-1.5,0.1, 0.3, 0.2), theta =  c(110, -12, -0.3, -0.8, -0.2)){
psi1.trim <- c()
mean.w.trim <- c()
min.trim <- c()
max.trim <- c()
sd.w.trim <- c()
for (r in 1:nsim){
data <- dataGenFun(n, mu, sig.mat, eta, theta)  # Assuming dataGenFun is a function that generates data
x1 <- data$x1
x2 <- data$x2
x3 <- data$x3
A <- data$A
Y <- data$Y
expo.model <- glm(A ~ x1 + x2 + x3, data = data, family = binomial(link = "logit"))
eta.hat <- expo.model$coefficients
pi.hat <- (1 + exp(-(eta.hat[1] + x1 * eta.hat[2] + x2 * eta.hat[3] + x3 * eta.hat[4])))^(-1)
w.un <- data$A / pi.hat + (1 - data$A) / (1 - pi.hat)
upper_bound <- quantile(w.un, trim.p)
lower_bound <- quantile(w.un, 1 - trim.p)
w.trim <- pmax(pmin(w.un, upper_bound), lower_bound)
mean.w.trim[r] <- mean(w.trim)
sd.w.trim[r] <- sd(w.trim)
max.trim[r] <- max(w.trim)
min.trim[r] <- min(w.trim)
### trimmed weighting
msm.trim <- lm(Y ~ A, data = data, weights = w.trim)
psi1.trim[r] <- msm.trim$coefficients[2]
}
bias <- mean(psi1.trim) - theta[2]  # Assuming the true ATE is -12
ese <- sd(psi1.trim)
mse <- mean((psi1.trim + 12)^2)
weight.mean <- mean(mean.w.trim)
weight.ese <- sd(mean.w.trim)
weight.asd <- mean(sd.w.trim)
weight.max <- mean(max.trim)
weight.min <- mean(min.trim)
measure <- cbind(bias, mse, weight.mean, weight.ese, weight.asd, weight.max, weight.min)
return(measure)
}
measureATEfun()
trimSummary <- function(nsim = 1000, n = 500, mu = c(10, 1, 11),
sig.mat = matrix(c(11^2, 4, 4,
4, 3^2, 3,
4, 3, 8^2), 3),
eta = c(-1.5, 0.1, 0.3, 0.2),
theta =  c(110, -12, -0.3, -0.8, -0.2),
trimperc.try = c(1, 0.99, 0.95, 0.9, 0.75, 0.5)) {
bias <- c()
mse <- c()
weight.mean <- c()
weight.ese <- c()
weight.asd <- c()
weight.max <- c()
weight.min <- c()
for (i in 1:length(trimperc.try)) {
measure.psi1 <- measureATEfun(nsim, trimperc.try[i], n, mu, sig.mat, eta, theta)
bias[i] <- measure.psi1[1]
mse[i] <- measure.psi1[2]
weight.mean[i] <- measure.psi1[3]
weight.ese[i] <- measure.psi1[4]
weight.asd[i] <- measure.psi1[5]
weight.max[i] <- measure.psi1[6]
weight.min[i] <- measure.psi1[7]
}
ese <- sqrt(mse - bias^2)
trim.proportion <- (1 - trimperc.try) * 2
data <- data.frame(trim.prop = trim.proportion, weight.mean = weight.mean,
weight.ese = weight.ese, weight.asd = weight.asd,
weight.max = weight.max, weight.min = weight.min,
bias = bias, ese = ese, mse = mse)
# Create three plots using ggplot2
plot_bias <- ggplot2::ggplot(data, aes(x = trim.prop, y = bias)) +
geom_line() +
labs(x = "Weight Trimming Proportion", y = "Bias")
plot_ese <- ggplot2::ggplot(data, aes(x = trim.prop, y = ese)) +
geom_line() +
labs(x = "Weight Trimming Proportion", y = "EmpSE")
plot_mse <- ggplot2::ggplot(data, aes(x = trim.prop, y = mse)) +
geom_line() +
labs(x = "Weight Trimming Proportion", y = "MSE")
# Arrange the three plots side by side using grid.arrange from gridExtra
combined_plots <- gridExtra::grid.arrange(plot_bias, plot_ese, plot_mse, ncol = 3)
return(data)
}
trimSummary()
trimSummary <- function(nsim = 1000, n = 500, mu = c(10, 1, 11),
sig.mat = matrix(c(11^2, 4, 4,
4, 3^2, 3,
4, 3, 8^2), 3),
eta = c(-1.5, 0.1, 0.3, 0.2),
theta =  c(110, -12, -0.3, -0.8, -0.2),
trimperc.try = c(1, 0.99, 0.95, 0.9, 0.75, 0.5)) {
bias <- c()
mse <- c()
weight.mean <- c()
weight.ese <- c()
weight.asd <- c()
weight.max <- c()
weight.min <- c()
for (i in 1:length(trimperc.try)) {
measure.psi1 <- measureATEfun(nsim, trimperc.try[i], n, mu, sig.mat, eta, theta)
bias[i] <- measure.psi1[1]
mse[i] <- measure.psi1[2]
weight.mean[i] <- measure.psi1[3]
weight.ese[i] <- measure.psi1[4]
weight.asd[i] <- measure.psi1[5]
weight.max[i] <- measure.psi1[6]
weight.min[i] <- measure.psi1[7]
}
ese <- sqrt(mse - bias^2)
trim.proportion <- (1 - trimperc.try) * 2
data <- data.frame(trim.perc = trimperc.try, trim.prop = trim.proportion, weight.mean = weight.mean,
weight.ese = weight.ese, weight.asd = weight.asd,
weight.max = weight.max, weight.min = weight.min,
bias = bias, ese = ese, mse = mse)
# Create three plots using ggplot2
plot_bias <- ggplot2::ggplot(data, aes(x = trim.prop, y = bias)) +
geom_line() +
labs(x = "Weight Trimming Proportion", y = "Bias")
plot_ese <- ggplot2::ggplot(data, aes(x = trim.prop, y = ese)) +
geom_line() +
labs(x = "Weight Trimming Proportion", y = "EmpSE")
plot_mse <- ggplot2::ggplot(data, aes(x = trim.prop, y = mse)) +
geom_line() +
labs(x = "Weight Trimming Proportion", y = "MSE")
# Arrange the three plots side by side using grid.arrange from gridExtra
combined_plots <- gridExtra::grid.arrange(plot_bias, plot_ese, plot_mse, ncol = 3)
return(data)
}
trimSummary()
#' Summary of ATE Estimation Using Weight Trimming
#'
#' `trimSummary()` performs a simulation study to evaluate the performance of the
#' `measureATE.fun()` function with different weight trimming percentiles. It calculates
#' bias, empirical standard error (EmpSE), and mean squared error (MSE) for each weight
#' trimming percentile specified in `trimperc.try`. Additionally, the function computes
#' summary statistics for weights, including mean of trimmed weights, standard error of
#' mean of trimmed weights, average standard deviation of trimmed weights, average maximum
#' trimmed weight, and average minimum trimmed weight. The function then generates three
#' plots using `ggplot2` to visualize the relationship between weight trimming percentile
#' and bias, EmpSE, and MSE.
#'
#' @param nsim The number of simulations to perform for each weight trimming percentile.
#' An integer. Default to 1000.
#' @param n The number of observations in each simulated dataset. An integer. Default to 500.
#' @param mu The mean vector of the multivariate normal distribution for confounders x1, x2, x3.
#' A numeric vector of length 3. Default to c(10, 1, 11).
#' @param sig.mat The covariance matrix of the multivariate normal distribution for confounders
#' x1, x2, x3. A 3x3 numeric matrix. Default to a specific matrix.
#' @param eta The coefficients of the logistic regression model for the binary treatment A.
#' A numeric vector of length 4, representing intercept and coefficients for x1, x2, x3.
#' Default to a specific numeric vector.
#' @param theta The coefficients of the linear regression model for the continuous outcome Y.
#' A numeric vector of length 5, representing intercept, coefficients for A, x1, x2, x3.
#' Default to a specific numeric vector.
#' @param trimperc.try A numeric vector specifying the weight trimming percentiles to evaluate.
#' Each value should be between 0.5 and 1 (both inclusive) to represent the desired percentile
#' for weight trimming.
#'
#' @return A data frame containing statistics (bias, EmpSE, and MSE) for each weight trimming
#' percentile in `trimperc.try`. The data frame also includes summary statistics for weights:
#' trim.perc (weight trimming percentile), trim.prop (weight trimming proportion),
#' weight.mean (mean of trimmed weights), weight.ese (standard error of mean of trimmed weights),
#' weight.asd (average standard deviation of trimmed weights),
#' weight.max (average maximum trimmed weight), weight.min (average minimum
#' trimmed weight), bias (difference between estimated and true ATE), ese (empirical standard
#' error of the estimator), and mse (mean squared error of the estimator).
#'
#' @importFrom ggplot2 aes geom_line labs
#' @importFrom gridExtra grid.arrange
#' @export
trimSummary <- function(nsim = 1000, n = 500, mu = c(10, 1, 11),
sig.mat = matrix(c(11^2, 4, 4,
4, 3^2, 3,
4, 3, 8^2), 3),
eta = c(-1.5, 0.1, 0.3, 0.2),
theta =  c(110, -12, -0.3, -0.8, -0.2),
trimperc.try = c(1, 0.99, 0.95, 0.9, 0.75, 0.5)) {
bias <- c()
mse <- c()
weight.mean <- c()
weight.ese <- c()
weight.asd <- c()
weight.max <- c()
weight.min <- c()
for (i in 1:length(trimperc.try)) {
measure.psi1 <- measureATEfun(nsim, trimperc.try[i], n, mu, sig.mat, eta, theta)
bias[i] <- measure.psi1[1]
mse[i] <- measure.psi1[2]
weight.mean[i] <- measure.psi1[3]
weight.ese[i] <- measure.psi1[4]
weight.asd[i] <- measure.psi1[5]
weight.max[i] <- measure.psi1[6]
weight.min[i] <- measure.psi1[7]
}
ese <- sqrt(mse - bias^2)
trim.proportion <- (1 - trimperc.try) * 2
data <- data.frame(trim.perc = trimperc.try, trim.prop = trim.proportion, weight.mean = weight.mean,
weight.ese = weight.ese, weight.asd = weight.asd,
weight.max = weight.max, weight.min = weight.min,
bias = bias, ese = ese, mse = mse)
# Create three plots using ggplot2
plot_bias <- ggplot2::ggplot(data, aes(x = trim.prop, y = bias)) +
geom_line() +
labs(x = "Weight Trimming Proportion", y = "Bias")
plot_ese <- ggplot2::ggplot(data, aes(x = trim.prop, y = ese)) +
geom_line() +
labs(x = "Weight Trimming Proportion", y = "EmpSE")
plot_mse <- ggplot2::ggplot(data, aes(x = trim.prop, y = mse)) +
geom_line() +
labs(x = "Weight Trimming Proportion", y = "MSE")
# Arrange the three plots side by side using grid.arrange from gridExtra
combined_plots <- gridExtra::grid.arrange(plot_bias, plot_ese, plot_mse, ncol = 3)
return(data)
}
measureATEfun <- function(nsim = 1000, trim.p = 0.95, n = 500,
mu = c(10, 1, 11), sig.mat = matrix(c(11^2, 4, 4,
4, 3^2, 3,
4, 3, 8^2), 3),
eta = c(-1.5,0.1, 0.3, 0.2), theta =  c(110, -12, -0.3, -0.8, -0.2)){
psi1.trim <- c()
mean.w.trim <- c()
min.trim <- c()
max.trim <- c()
sd.w.trim <- c()
for (r in 1:nsim){
data <- dataGenFun(n, mu, sig.mat, eta, theta)  # Assuming dataGenFun is a function that generates data
x1 <- data$x1
x2 <- data$x2
x3 <- data$x3
A <- data$A
Y <- data$Y
expo.model <- glm(A ~ x1 + x2 + x3, data = data, family = binomial(link = "logit"))
eta.hat <- expo.model$coefficients
pi.hat <- (1 + exp(-(eta.hat[1] + x1 * eta.hat[2] + x2 * eta.hat[3] + x3 * eta.hat[4])))^(-1)
w.un <- data$A / pi.hat + (1 - data$A) / (1 - pi.hat)
upper_bound <- quantile(w.un, trim.p)
lower_bound <- quantile(w.un, 1 - trim.p)
w.trim <- pmax(pmin(w.un, upper_bound), lower_bound)
mean.w.trim[r] <- mean(w.trim)
sd.w.trim[r] <- sd(w.trim)
max.trim[r] <- max(w.trim)
min.trim[r] <- min(w.trim)
### trimmed weighting
msm.trim <- lm(Y ~ A, data = data, weights = w.trim)
psi1.trim[r] <- msm.trim$coefficients[2]
}
bias <- mean(psi1.trim) - theta[2]  # Assuming the true ATE is -12
ese <- sd(psi1.trim)
mse <- mean((psi1.trim + 12)^2)
weight.mean <- mean(mean.w.trim)
weight.ese <- sd(mean.w.trim)
weight.asd <- mean(sd.w.trim)
weight.max <- mean(max.trim)
weight.min <- mean(min.trim)
measure <- cbind(bias, mse, weight.mean, weight.ese, weight.asd, weight.max, weight.min)
return(measure)
}
#'
#' `dataGenFun()` generates data from a Generalized Linear Model (GLM) with a binary treatment (A)
#' and confounding variables (x1, x2, x3). The confounding variables are assumed to be generated
#' from a multivariate normal distribution with a specified mean and covariance matrix. The binary
#' treatment A is modeled using a logistic link function with specified coefficients. The continuous
#' outcome Y is generated based on the treatment and confounders using a linear model with normally
#' distributed errors.
#'
#' @param n The number of observations to generate. An integer.
#' @param mu The mean vector of the multivariate normal distribution for predictors x1, x2, x3.
#' A numeric vector of length 3.
#' @param sigma.mat The covariance matrix of the multivariate normal distribution for predictors
#' x1, x2, x3. A 3x3 numeric matrix.
#' @param eta The coefficients of the logistic regression model for the binary outcome A.
#' A numeric vector of length 4, representing intercept and coefficients for x1, x2, x3.
#' @param theta The coefficients of the linear regression model for the continuous outcome Y.
#' A numeric vector of length 5, representing intercept, coefficients for A, x1, x2, x3.
#'
#' @return A data frame containing the generated data with columns x1, x2, x3, A, Y.
#'
#' @examples
#' # Generate data with default parameters
#' data <- dataGenFun(n = 1000, mu = c(0, 0, 0), sigma.mat = diag(3), eta = c(0, 0, 0, 0),
#'                    theta = c(0, 1, 1, 1, 1))
#'
#' @importFrom MASS mvrnorm
dataGenFun <- function(n, mu, sigma.mat, eta, theta){
mvn <- MASS::mvrnorm(n, mu = mu, Sigma = sigma.mat)
x1 <- mvn[, 1]
x2 <- mvn[, 2]
x3 <- mvn[, 3]
pi <- 1 / (1 + exp(-(eta[1] + eta[2] * x1 + eta[3] * x2 + eta[4] * x3)))
A <- rbinom(n, 1, pi)
Y <- theta[1] + theta[2] * A + theta[3] * x1 + theta[4] * x2 + theta[5] * x3 + rnorm(n, 0, 1)
data <- as.data.frame(cbind(x1, x2, x3, A, Y))
return(data)
}
set.seed(1)
trimSummary()
